/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.example;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"birthYear\",\"type\":\"int\"},{\"name\":\"salaryRate\",\"type\":\"double\"},{\"name\":\"position\",\"type\":\"string\"},{\"name\":\"department\",\"type\":{\"type\":\"enum\",\"name\":\"department\",\"symbols\":[\"Sale\",\"Marketing\",\"IT\",\"Management\",\"Accounting\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence firstName;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public int birthYear;
  @Deprecated public double salaryRate;
  @Deprecated public java.lang.CharSequence position;
  @Deprecated public com.example.department department;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Employee() {}

  /**
   * All-args constructor.
   */
  public Employee(java.lang.Integer id, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.Integer birthYear, java.lang.Double salaryRate, java.lang.CharSequence position, com.example.department department) {
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
    this.birthYear = birthYear;
    this.salaryRate = salaryRate;
    this.position = position;
    this.department = department;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return birthYear;
    case 4: return salaryRate;
    case 5: return position;
    case 6: return department;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: lastName = (java.lang.CharSequence)value$; break;
    case 3: birthYear = (java.lang.Integer)value$; break;
    case 4: salaryRate = (java.lang.Double)value$; break;
    case 5: position = (java.lang.CharSequence)value$; break;
    case 6: department = (com.example.department)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'birthYear' field.
   */
  public java.lang.Integer getBirthYear() {
    return birthYear;
  }

  /**
   * Sets the value of the 'birthYear' field.
   * @param value the value to set.
   */
  public void setBirthYear(java.lang.Integer value) {
    this.birthYear = value;
  }

  /**
   * Gets the value of the 'salaryRate' field.
   */
  public java.lang.Double getSalaryRate() {
    return salaryRate;
  }

  /**
   * Sets the value of the 'salaryRate' field.
   * @param value the value to set.
   */
  public void setSalaryRate(java.lang.Double value) {
    this.salaryRate = value;
  }

  /**
   * Gets the value of the 'position' field.
   */
  public java.lang.CharSequence getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.CharSequence value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'department' field.
   */
  public com.example.department getDepartment() {
    return department;
  }

  /**
   * Sets the value of the 'department' field.
   * @param value the value to set.
   */
  public void setDepartment(com.example.department value) {
    this.department = value;
  }

  /** Creates a new Employee RecordBuilder */
  public static com.example.Employee.Builder newBuilder() {
    return new com.example.Employee.Builder();
  }
  
  /** Creates a new Employee RecordBuilder by copying an existing Builder */
  public static com.example.Employee.Builder newBuilder(com.example.Employee.Builder other) {
    return new com.example.Employee.Builder(other);
  }
  
  /** Creates a new Employee RecordBuilder by copying an existing Employee instance */
  public static com.example.Employee.Builder newBuilder(com.example.Employee other) {
    return new com.example.Employee.Builder(other);
  }
  
  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private int id;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private int birthYear;
    private double salaryRate;
    private java.lang.CharSequence position;
    private com.example.department department;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.example.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthYear)) {
        this.birthYear = data().deepCopy(fields()[3].schema(), other.birthYear);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salaryRate)) {
        this.salaryRate = data().deepCopy(fields()[4].schema(), other.salaryRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.position)) {
        this.position = data().deepCopy(fields()[5].schema(), other.position);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.department)) {
        this.department = data().deepCopy(fields()[6].schema(), other.department);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Employee instance */
    private Builder(com.example.Employee other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthYear)) {
        this.birthYear = data().deepCopy(fields()[3].schema(), other.birthYear);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salaryRate)) {
        this.salaryRate = data().deepCopy(fields()[4].schema(), other.salaryRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.position)) {
        this.position = data().deepCopy(fields()[5].schema(), other.position);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.department)) {
        this.department = data().deepCopy(fields()[6].schema(), other.department);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.example.Employee.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.example.Employee.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'firstName' field */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }
    
    /** Sets the value of the 'firstName' field */
    public com.example.Employee.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'firstName' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'firstName' field */
    public com.example.Employee.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lastName' field */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }
    
    /** Sets the value of the 'lastName' field */
    public com.example.Employee.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lastName' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lastName' field */
    public com.example.Employee.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'birthYear' field */
    public java.lang.Integer getBirthYear() {
      return birthYear;
    }
    
    /** Sets the value of the 'birthYear' field */
    public com.example.Employee.Builder setBirthYear(int value) {
      validate(fields()[3], value);
      this.birthYear = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'birthYear' field has been set */
    public boolean hasBirthYear() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'birthYear' field */
    public com.example.Employee.Builder clearBirthYear() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'salaryRate' field */
    public java.lang.Double getSalaryRate() {
      return salaryRate;
    }
    
    /** Sets the value of the 'salaryRate' field */
    public com.example.Employee.Builder setSalaryRate(double value) {
      validate(fields()[4], value);
      this.salaryRate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'salaryRate' field has been set */
    public boolean hasSalaryRate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'salaryRate' field */
    public com.example.Employee.Builder clearSalaryRate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'position' field */
    public java.lang.CharSequence getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public com.example.Employee.Builder setPosition(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.position = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'position' field */
    public com.example.Employee.Builder clearPosition() {
      position = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'department' field */
    public com.example.department getDepartment() {
      return department;
    }
    
    /** Sets the value of the 'department' field */
    public com.example.Employee.Builder setDepartment(com.example.department value) {
      validate(fields()[6], value);
      this.department = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'department' field has been set */
    public boolean hasDepartment() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'department' field */
    public com.example.Employee.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Employee build() {
      try {
        Employee record = new Employee();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.birthYear = fieldSetFlags()[3] ? this.birthYear : (java.lang.Integer) defaultValue(fields()[3]);
        record.salaryRate = fieldSetFlags()[4] ? this.salaryRate : (java.lang.Double) defaultValue(fields()[4]);
        record.position = fieldSetFlags()[5] ? this.position : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.department = fieldSetFlags()[6] ? this.department : (com.example.department) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
